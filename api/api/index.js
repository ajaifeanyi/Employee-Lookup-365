/* This code sample provides a starter kit to implement server side logic for your Teams App in JavaScript,
 * refer to https://docs.microsoft.com/en-us/azure/azure-functions/functions-reference for complete Azure Functions
 * developer guide.
 */

// Import polyfills for fetch required by msgraph-sdk-javascript.
require("isomorphic-fetch");
const teamsfxSdk = require("@microsoft/teamsfx");
const config = require("../config");
const fetch = require("node-fetch");

/**
 * This function handles requests from teamsfx client.
 * The HTTP request should contain an SSO token queried from Teams in the header.
 * Before trigger this function, teamsfx binding would process the SSO token and generate teamsfx configuration.
 *
 * This function initializes the teamsfx SDK with the configuration and calls these APIs:
 * - new OnBehalfOfUserCredential(ssoToken, authConfig)  - Construct OnBehalfOfUserCredential instance with the received SSO token and initialized configuration.
 * - getUserInfo() - Get the user's information from the received SSO token.
 * - createMicrosoftGraphClientWithCredential() - Get a graph client to access user's Microsoft 365 data.
 *
 * The response contains multiple message blocks constructed into a JSON object, including:
 * - An echo of the request body.
 * - The display name encoded in the SSO token.
 * - Current user's Microsoft 365 profile if the user has consented.
 *
 * @param {Context} context - The Azure Functions context object.
 * @param {HttpRequest} req - The HTTP request.
 * @param {teamsfxContext} { [key: string]: any; } - The context generated by teamsfx binding.
 */
module.exports = async function (context, req, teamsfxContext) {
  try {
    context.log("HTTP trigger function processed a request.");

    // Get api route name
    let route = context.bindingData.route;

    // Initialize response.
    const res = {
      status: 200,
      body: {},
    };

    // Put an echo into response body.
    res.body.receivedHTTPRequestBody = req.body || "";

    // Prepare access token.
    const ssoToken = teamsfxContext["AccessToken"];
    if (!ssoToken) {
      return {
        status: 400,
        body: {
          error: "Unable to get SSO token from request header.",
        },
      };
    }

    // get access token
    let accessToken = await getAccessToken(ssoToken);

    if (req.method === "GET" && route === "allUsers") {
      let allUsers = await getAllUsers(accessToken); // get all users
      res.body.allUsers = allUsers;
    } else if (req.method === "GET" && route === "allUsersWithPhoto") {
      let allUsers = await getAllUsers(accessToken);
      let allUsersWithPhoto = await getUsersPhotos(allUsers, accessToken); // get all users with photo
      res.body.allUsers = allUsersWithPhoto;
    }
    return res;
  } catch (err) {
    return {
      status: err.status,
      body: {
        error: err.message
      }
    };
  }
};


// function to exchange sso token for access token on-behalf-of the user from Azure AD
async function getAccessToken(ssoToken) {
  try {
    const tokenEndpoint = `https://login.microsoftonline.com/${config.tenantId}/oauth2/v2.0/token`;

    let Headers = new fetch.Headers();
    Headers.append('Content-Type', 'application/x-www-form-urlencoded');

    let urlencoded = new URLSearchParams();
    urlencoded.append('grant_type', 'urn:ietf:params:oauth:grant-type:jwt-bearer');
    urlencoded.append('client_id', config.clientId);
    urlencoded.append('client_secret', config.clientSecret);
    urlencoded.append('assertion', ssoToken);
    urlencoded.append('scope', "User.Read User.ReadBasic.All User.Read.All");
    urlencoded.append('requested_token_use', 'on_behalf_of');

    let options = {
      method: 'POST',
      headers: Headers,
      body: urlencoded
    };

    let response = await fetch(tokenEndpoint, options);
    if (response.ok) {
      let tokenData = await response.json();
      return tokenData.access_token;
    } else {
      let responseText = await response.text();
      if (JSON.parse(responseText).error === "invalid_grant") {
        throw { status: 401, message: "invalid_grant: You or an administrator needs to consent to required permission(s)." };
      } else {
        throw { status: 400, message: "Unable to get access token to fetch resources." };
      }
    }
  } catch (err) {
    throw { status: err.status || 500, message: (err.status && err.status < 500) ? err.message : "Unable to get access token to fetch resources." };
  }
}


// function to get all users
async function getAllUsers(accessToken) {

  let allUsersEndpoint = "https://graph.microsoft.com/v1.0/users?$top=999&$filter=(onPremisesSyncEnabled eq true OR userType eq 'Member') and accountEnabled eq true&$select=id,mail,displayName,jobTitle,mobilePhone,department,userPrincipalName,businessPhones,employeeId,userType,accountEnabled,onPremisesSyncEnabled"
  let allUsersOptions = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${accessToken}`,
      'Content-type': 'application/json',
      'Accept': 'application/json',
      'Accept-Charset': 'utf-8'
    },
  };
  try {
    let response = await fetch(allUsersEndpoint, allUsersOptions);

    if (response.ok) {
      let allUsers = await response.json();
      return allUsers?.value?.sort((a, b) => (a.displayName > b.displayName) ? 1 : ((b.displayName > a.displayName) ? -1 : 0));
    } else {
      throw { status: 500, message: "Unable to get list of users." };
    }
  } catch (err) {
    throw { status: 500, message: "Unable to get list of users." };
  }
}


// function to get photos for all users
async function getUsersPhotos(allUsers, accessToken) {
  let userPhotoOptions = {
    method: 'GET',
    headers: {
      'Authorization': `Bearer ${accessToken}`
    },
  };

  const usersWithPhoto = await Promise.all(
    allUsers?.map(async (user, index) => {
      try {
        let userPhotoEndpoint = `https://graph.microsoft.com/v1.0/users/${user.id}/photo/$value`;
        let response = await fetch(userPhotoEndpoint, userPhotoOptions);

        if (response.ok) {
          response = await response.arrayBuffer();
          response = Buffer.from(response).toJSON();
          user.profilePhoto = response;
        } else {
          user.profilePhoto = "";
        }
        return user;
      } catch (error) {
        throw { status: 500, message: "Unable to get user photos." };
      }
    })
  );

  return usersWithPhoto;
}